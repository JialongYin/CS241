/**
 * Resplendent RPCs
 * CS 241 - Spring 2019
 */
/**
* This file implements the client stub generated by rpcgen.
* Functionally, it asks the service holding the dns query service for dns
* results.
* This client then prints the dns query results.
*/

#define MAX_BYTES_RECV 22 // e.g. "123.123.123.123:65535"
#define MAX_BYTES_IPV4 16 // e.g. "123.123.123.123"
#define MAX_BYTES_PORT 6  // e.g. "65535"

// Functions you need to implement

/**
 * The function that you are implementing!
 * General flow is this.
 * 1. Check the cache if it contains a particular address in the `CACHE_FILE`.
 * If so print out that address and exit. (Hint look in common.h)
 * 2. If not create `query` object
 * 3. Use the function `send_query` to send a it to a nameserver and receive a
 * response
 * 4. If the response object was not successful
 * (hint: there is a field in response called success)
 * then use `print_failure` and exit
 * 5. If that response is valid then use `print_ipv4_address` to print out the
 * address
 * - Don't worry about errors for the system calls here
 * Congrats you just implemented a DNS client!
 */
void resolve_hostname(char *server_host, char *host_to_resolve);

// Provided Functionality

/**
 * Sends a query `q` to a server `to_server`
 * and returns the response
 * Be sure to call
 * `xdr_free(xdr_response, response)`
 * On the response object when done using it
 */
response *send_query(query *q, char *to_server);

/**
* Create the client stub. We will send our queries through this stub to the
* server.
*/
CLIENT *create_client_stub(char *host);

/**
* Prints a failure message to stdout. Should be called when a response has its
* success field set to false.
*/
void print_failure();

/**
* Prints the IPv4 address retrieved from the server. Should be called when a
* response has its success field set to true.
* Format: "[HOST] has ipv4 address [www.xxx.yyy.zzz]\n"
*/
void print_ipv4_address(char *host, char *ipv4_address);

/**
 * Same as the previous function but makes it clear on the cache was accessed
 */
void print_ipv4_address_in_cache(char *host, char *ipv4_address);
