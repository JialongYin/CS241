# use gcc with -fsanitize=thread bc clang on student vms (3.4) has buggy thread
# sanitizer
# this means we also need -ltsan in the link step. libtsan must be installed
# (sudo yum install libtsan on student vms)

OBJS_DIR = .objs

# define all the student executables
MMU_TEST=mmu_test
TLB_TEST=tlb_test
EXES_STUDENT=$(MMU_TEST) $(TLB_TEST)

# list object file dependencies for each
OBJS_MMU_TEST=$(MMU_TEST).o mmu.o tlb.o kernel.o segments.o
OBJS_TLB_TEST= $(TLB_TEST).o tlb.o

# set up compiler
CC = clang
WARNINGS = -Wall -Wextra -Werror -Wno-error=unused-parameter -Wmissing-declarations -Wmissing-variable-declarations
CFLAGS_DEBUG   = -O0 $(WARNINGS) -g -std=c99 -c -MMD -MP -D_GNU_SOURCE
CFLAGS_RELEASE = -O2 $(WARNINGS) -std=c99 -c -MMD -MP -D_GNU_SOURCE
CFLAGS_TSAN_DEBUG    = $(CFLAGS_DEBUG)
CFLAGS_TSAN = $(CFLAGS_TSAN_DEBUG) -UDEBUG

# set up linker
LD = clang
LDFLAGS = -lm
LD_TSAN_FLAGS = -ltsan -fPIC -pie

IS_VM=$(shell hostname | grep "cs241")
VM_OVERRIDE=$(shell echo $$HOSTNAME)
ifeq ($(IS_VM),)
ifneq ($(VM_OVERRIDE),cs241grader)
$(error This assignment must be compiled on the CS241 VMs)
endif
endif


.PHONY: all
all: release

# build types
# run clean before building debug so that all of the release executables
# disappear
.PHONY: debug
.PHONY: release
.PHONY: debug-tsan
.PHONY: tsan

release: $(EXES_STUDENT)
debug:   clean $(EXES_STUDENT:%=%-debug)
tsan:    clean $(EXES_STUDENT:%=%-tsan)
debug-tsan:    clean $(EXES_STUDENT:%=%-debug-tsan)

# include dependencies
-include $(OBJS_DIR)/*.d

$(OBJS_DIR):
	@mkdir -p $(OBJS_DIR)

# patterns to create objects
# keep the debug and release postfix for object files so that we can always
# separate them correctly
$(OBJS_DIR)/%-debug.o: %.c | $(OBJS_DIR)
	$(CC) $(CFLAGS_DEBUG) $< -o $@

$(OBJS_DIR)/%-debug-tsan.o: %.c | $(OBJS_DIR)
	$(CC) $(CFLAGS_TSAN_DEBUG) $< -o $@

$(OBJS_DIR)/%-tsan.o: %.c | $(OBJS_DIR)
	$(CC) $(CFLAGS_TSAN) $< -o $@

$(OBJS_DIR)/%-release.o: %.c | $(OBJS_DIR)
	$(CC) $(CFLAGS_RELEASE) $< -o $@

# exes
# you will need a triple of exe and exe-debug and exe-tsan for each exe (other
# than provided exes)

$(MMU_TEST): $(OBJS_MMU_TEST:%.o=$(OBJS_DIR)/%-release.o)
	$(LD) $^ $(LDFLAGS) -o $@

$(MMU_TEST)-debug: $(OBJS_MMU_TEST:%.o=$(OBJS_DIR)/%-debug.o)
	$(LD) $^ $(LDFLAGS) -o $@

$(MMU_TEST)-debug-tsan: $(OBJS_MMU_TEST:%.o=$(OBJS_DIR)/%-debug-tsan.o)
	$(LD) $^ $(LD_TSAN_FLAGS) -o $@

$(MMU_TEST)-tsan: $(OBJS_MMU_TEST:%.o=$(OBJS_DIR)/%-tsan.o)
	$(LD) $^ $(LD_TSAN_FLAGS) -o $@

$(TLB_TEST): $(OBJS_TLB_TEST:%.o=$(OBJS_DIR)/%-release.o)
	$(LD) $^ $(LDFLAGS) -o $@

$(TLB_TEST)-debug: $(OBJS_TLB_TEST:%.o=$(OBJS_DIR)/%-debug.o)
	$(LD) $^ $(LDFLAGS) -o $@

$(TLB_TEST)-debug-tsan: $(OBJS_TLB_TEST:%.o=$(OBJS_DIR)/%-debug-tsan.o)
	$(LD) $^ $(LD_TSAN_FLAGS) -o $@

$(TLB_TEST)-tsan: $(OBJS_TLB_TEST:%.o=$(OBJS_DIR)/%-tsan.o)
	$(LD) $^ $(LD_TSAN_FLAGS) -o $@


.PHONY: clean
clean:
	rm -rf .objs $(EXES_STUDENT)\
		$(EXES_STUDENT:%=%-tsan)\
		$(EXES_STUDENT:%=%-debug-tsan)\
		$(EXES_STUDENT:%=%-debug)
